#include<iostream.h>
#include<conio.h>
#include<time.h>
#include<stdlib.h>
class heap
{
	 int item,i,b[1000];
	private:
	 int a[1000],n;
	public:
	void getdata();
	int delheap();
	void insert(int);
	void adjust(int[],int,int);
	void heapsort();
	void disp();
	void disp1();
};
void heap::getdata()
{
	cout<<"Program for HeapSort for Descending using Insert/Delete...\n";
	cout<<"\nEnter Size :=";
	cin>>n;
	for(int i=1;i<=n;i++)
	{
	  a[i]=random(20000);
	}
}
void heap::insert(int i)
{
	int item=a[i];
	while((i>1) && (a[i/2]>item))
	{
	 a[i]=a[i/2];
	 i=i/2;
	}
	a[i]=item;
}
void heap::adjust(int a[],int i,int n)
{
	int j=2*i;
	item=a[i];
	while(j<=n)
	{
	  if((j<n) && (a[j] > a[j+1]))
	  j=j+1;
	  if(item<=a[j])
	  break;
	  a[j/2]=a[j];
	  j=2*j;
	}
	a[j/2]=item;
}
int heap::delheap()
{
	if(n==0)
	{
	  cout<<"heap is empty :";
	}
	int x=a[1];
	a[1]=a[i];
	adjust(a,1,i-1);
	return x;
}
void heap::heapsort()
{
	for(i=1;i<=n;i++)
	insert(i);
	disp();
	for(i=n;i>=1;i--)
	b[i]=delheap();
}
void heap::disp()
{
	for(i=1;i<=n;i++)
	{
	  if(i%8==0)
	  cout<<"\n";
	  cout<<a[i]<<"\t";
	}
}
void heap::disp1()
{
	for(i=1;i<=n;i++)
	{
	  if(i%8==0)
	  cout<<"\n";
	  cout<<b[i]<<"\t";
	}
}
void main()
{
	clrscr();
	clock_t e,s;
	heap h;
	h.getdata();
	cout<<"\n\n Before Sort  :\n";
	s=clock();
	h.heapsort();
	e=clock();
	cout<<"\n\n After Sort :\n";
	h.disp1();
	cout<<"\n\n Time Complexity ::"<<((e-s)/(CLK_TCK));
	getch();
}



/*OUTPUT :
Program for HeapSort for Descending using Insert/Delete...

Enter Size :=50


 Before Sort  :
79      211     2179    665     3596    3273    9020
830     2428    6889    4388    4343    6702    10739   11286
3915    2279    8123    9497    11284   9821    5288    7114
8535    12909   16790   18464   16217   13964   12094   13233
11994   10983   14400   3303    16309   13710   14006   13424
18997   15287   16552   17374   19190   5495    8461    13895
8885    10765   19051

 After Sort :
19190   19051   18997   18464   17374   16790   16552
16309   16217   15287   14400   14006   13964   13895   13710
13424   13233   12909   12094   11994   11286   11284   10983
10765   10739   9821    9497    9020    8885    8535    8461
8123    7114    6889    6702    5495    5288    4388    4343
3915    3596    3303    3273    2428    2279    2179    830
665     211     79

 Time Complexity ::0
*/
